---

- name: Make sure this is only run on a dell server
  assert:
    that: ansible_system_vendor is match('Dell.*')
    msg: "This role is only meant to be run on Dell systems"
  when: dell_dsu_assert

- name: include multipathd.yml if dell_dsu_manage_multipath_config is True
  include_tasks: multipathd.yml
  when: dell_dsu_manage_multipath_config

- name: Install Dell DSU repo
  environment: "{{ proxy_env|default({}) }}"
  local_action: shell curl -O https://linux.dell.com/repo/hardware/dsu/bootstrap.cgi && bash bootstrap.cgi
  args:
     creates: /etc/yum.repos.d/dell-system-update.repo
  tags: skip_ansible_lint
  register: reg_install_dsu_repo
  when: dell_dsu_repo_install
  failed_when: "('Done!' not in reg_install_dsu_repo.stdout) and (reg_install_dsu_repo.rc != 0)"

- name: print reg_install_dsu_repo variable if verbosity is 1
  debug:
    var: reg_install_dsu_repo
    verbosity: 1

- name: create /usr/libexec/dell_dup
  local_action: 
    module: file
    path: /usr/libexec/dell_dup
    state: directory
    mode: '0755'
  when: dell_dsu_rollout_gpg_keys

- name: copy gpg keys
  local_action: 
    module: copy
    dest: /usr/libexec/dell_dup/{{ item }}
    src: "{{ item }}"
  loop: "{{ dell_dsu_gpg_keys }}"
  when: dell_dsu_rollout_gpg_keys

- name: rpm import gpg keys
  local_action:
    module: rpm_key
    key: /usr/libexec/dell_dup/{{ item }}
  loop: "{{ dell_dsu_gpg_keys }}"
  when: dell_dsu_rollout_gpg_keys and not ansible_check_mode

- name: gpg import gpg keys
  local_action: "command gpg --import /usr/libexec/dell_dup/{{ item }}"
  register: reg_dell_dsu_gpg_import
  loop: "{{ dell_dsu_gpg_keys }}"
  changed_when: reg_dell_dsu_gpg_import.stderr is search('imported')
  failed_when: reg_dell_dsu_gpg_import.rc|int != 0
  when: dell_dsu_rollout_gpg_keys

- name: Installing Dell DSU RPM
  local_action:
    module: yum
    name: dell-system-update
    state: latest
  become: true

- name: Set categories_list
  set_fact:
    categories_list: "{{Â upgrade_categories.split(',') }}"
  when: (upgrade_categories is defined)

- name: Check if the arguments are well defined
  assert:
    that: firmware_components[item] is defined
  loop: "{{ categories_list }}"
  when: categories_list is defined

- name: Set dell_dsu_arguments
  set_fact:
    dell_dsu_arguments: "{{ dell_dsu_arguments_base }}{% if not dell_dsu_update_all_firmware %} --category={% set comma = joiner(',') %}{% for dsu_category in categories_list %}{{ comma() }}{{ firmware_components[dsu_category] }}{% endfor %}{% endif %}"
  when: (categories_list is defined) or (dell_dsu_update_all_firmware)

- name: Update firmware
  local_action: "command dsu {{ dell_dsu_arguments }}"
  become: true
  when: dell_dsu_arguments is defined
  register: command_result
  failed_when: command_result.rc not in dell_dsu_changed_exit_codes + dell_dsu_not_changed_exit_codes
  changed_when: command_result.rc in dell_dsu_changed_exit_codes

- name: Print DSU result
  debug:
    var: command_result
    verbosity: 1
...
